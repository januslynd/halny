{--
    This module has a set of functions aimed to *parse CSVs* files from
    different kind of sources to return a list of tuples.
-}
module halny.Halny where

import halny.IO (readLines)

comma :: Regex
comma = '\,'

{--
    Parses the file located at the *filePath* passes as *first*
    argument, and maps headers from the first line with the
    rest of the file returning a list of rows represented by
    list of tuples.
-}
-- tag::parseFile[]
parseFile :: Maybe Regex -> String -> IO [[(String,String)]]
parseFile separator filePath = do
    lines       <- readLines filePath
    return $ parse separator lines
-- end::parseFile[]

{--
    Parses a list and returns a list of tuples mapping
    headers with the rest of the entries of the list.

    e.g. A given list with the following lines:

    - ["name, job", "john, engineer", "tony, waiter"]

    *Should return* a structure like:

    - [[("name", "john"), ("job", "engineer")], [("name", "tony"), ("job", "waiter")]]

    By default if a *Nothing* value is passed as separator, the *comma*
    value will be used as splitter.
-}
parse :: Maybe Regex -> [String] -> [[(String,String)]]
parse separator stream = getRows headers rows
    where splitter = maybe comma id separator
          headers  = readHeaderRow splitter stream
          rows     = readRows splitter stream

{--
    Given a list of lines gets the first one, parses
    the line and *return the headers* of the file. The separator
    is passed as first argument.
-}
readHeaderRow :: Regex -> [String] -> [String]
readHeaderRow separator []     = []
readHeaderRow separator (x:xs) = parseRow separator x

{--
    Given a list of lines gets the all but the first one, parses
    each line and return a new list with all lines parsed with
    the separator passed as first parameter
-}
readRows :: Regex -> [String] -> [[String]]
readRows separator []     = []
readRows separator (x:xs) = map (parseRow separator) xs

{--
    Splits a given String by using the separator passed
    as first parameter
-}
parseRow :: Regex -> String -> [String]
parseRow separator line = separator.splitted line

{--
    Given a list of headers and a list with the rows it returns a list
    of list of tuples
-}
getRows :: [String] -> [[String]] -> [[(String,String)]]
getRows headers rows = fmap (zip headers) rows
