module jl.halny.Reader where

readHeaderRow :: [String] -> [String]
readHeaderRow lines = parseRowWithComma $ head lines

readRows :: [String] -> [[String]]
readRows rows = map parseRowWithComma $ tail rows

parseRow :: Regex -> String -> [String]
parseRow separator line = separator.splitted line

parseRowWithComma :: String -> [String]
parseRowWithComma = parseRow '\,'

getRows :: [String] -> [[String]] -> [[(String,String)]]
getRows headers rows = fmap (zip headers) rows

parse :: String -> IO [[(String,String)]]
parse filePath = do
    reader   <- openReader filePath
    lines    <- reader.getLines
    let headers = readHeaderRow lines
        rows    = readRows lines

    return $ getRows headers rows