module jl.halny.Reader where

readHeaderRow :: IO [String] -> IO [String]
readHeaderRow lines = fmap (parseRowWithComma . head) lines

readRows :: IO [String] -> IO [[String]]
readRows rows = fmap (map parseRowWithComma) $ fmap tail rows

parseRow :: Regex -> String -> [String]
parseRow separator line = separator.splitted line

parseRowWithComma :: String -> [String]
parseRowWithComma = parseRow '\,'

getRows :: IO [String] -> IO [[String]] -> IO [[(String,String)]]
getRows headers rows = headers >>= \h -> rows >>= \r -> return $ fmap (zip h) r

--- parse :: String -> IO [[(String,String)]]
