{--
    This module has a set of functions aimed to *parse CSVs* files from
    different kind of sources to return a list of tuples.
-}
module jl.halny.Reader where

import jl.halny.File
import jl.halny.Util

{--
    Parses the file located at the *filePath* passes as *first*
    argument, and maps headers from the first line with the
    rest of the file returning a list of rows represented by
    list of tuples. e.g. A given file with the following lines:

    - "name, job"
    - "john, engineer"
    - "tony, waiter"

    *Should return* a structure like:

    [[("name", "john"), ("job", "engineer")], [("name", "tony"), ("job", "waiter")]]

-}
parse :: String -> IO [[(String,String)]]
parse filePath = do
    lines <- readLines filePath
    let headers = readHeaderRow lines
        rows    = readRows lines
    return $ getRows headers rows

{--
    Given a list of lines gets the first one, parses
    the line and *return the headers* of the file
-}
readHeaderRow :: [String] -> [String]
readHeaderRow lines = parseRowWithComma $ head lines

{--
    Given a list of lines gets the all but the first one, parses
    each line and return a new list with all lines parsed
-}
readRows :: [String] -> [[String]]
readRows rows = map parseRowWithComma $ safeTail rows

{--
    *Splits a given String* by using the `,` separator
-}
parseRowWithComma :: String -> [String]
parseRowWithComma = parseRow '\,'

{--
    Splits a given String by using the separator passed
    as first parameter
-}
parseRow :: Regex -> String -> [String]
parseRow separator line = separator.splitted line

{--
    Given a list of headers and a list with the rows it returns a list
    of list of tuples
-}
getRows :: [String] -> [[String]] -> [[(String,String)]]
getRows headers rows = fmap (zip headers) rows